import telebot
from telebot import types
import numpy as np
import sympy as sp
import io
import matplotlib
from config import TOKEN, ADMIN_ID
from data import user_data, questions
import matplotlib.pyplot as plt
bot = telebot.TeleBot(TOKEN)
matplotlib.use('Agg')

def process_function(message):
    try:
        user_input = message.text
        x = sp.symbols('x')
        function = sp.sympify(user_input)
        derivative = sp.diff(function, x)
        critical_points = sp.solveset(derivative, x, domain=sp.S.Reals)
        response_message = f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏: {derivative}\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏: "

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        critical_points_list = [f"{point.evalf():.2f}" for point in critical_points if point.is_real]
        response_message += ', '.join(critical_points_list)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        bot.send_message(message.chat.id, response_message)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots()
        lam_f = sp.lambdify(x, function, modules=['numpy'])
        x_vals = np.linspace(-10, 10, 400)
        y_vals = lam_f(x_vals)
        ax.plot(x_vals, y_vals, label=f"{function}")

        # –û—Ç–º–µ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        for point in critical_points_list:
            y_val = lam_f(float(point))
            ax.plot(float(point), y_val, 'ro')

        ax.legend()
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        bot.send_photo(message.chat.id, photo=buf, caption="–í–∞—à –≥—Ä–∞—Ñ–∏–∫:")
        plt.close(fig)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é", callback_data="enter_function"))
        markup.add(types.InlineKeyboardButton("üìó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="show_docs"))
        markup.add(types.InlineKeyboardButton("üìô –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_test"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é", callback_data="enter_function"))
    markup.add(types.InlineKeyboardButton("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="show_docs"))
    markup.add(types.InlineKeyboardButton("üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test"))
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ *–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ë–æ—Ç* –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤.\n\n"
        "üìà –ú–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ *—ç–∫—Å—Ç—Ä–µ–º—É–º—ã* —Ñ—É–Ω–∫—Ü–∏–π, –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö *–≥—Ä–∞—Ñ–∏–∫–∏* –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç—ã.\n\n"
        "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:"
    )
    bot.send_message(
        message.chat.id,
        welcome_text,
        parse_mode='Markdown',
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏
@bot.callback_query_handler(func=lambda call: call.data == "enter_function")
def ask_for_function(call):
    msg = bot.send_message(call.message.chat.id,
                           "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'x**2 - 4*x + 4'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'x' –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é.")
    bot.register_next_step_handler(msg, process_function)


@bot.callback_query_handler(func=lambda call: call.data == "show_docs")
def show_docs(call):
    docs = (
        "üìò *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∏—Ö —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        "- üöÄ */start:* –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n"
        "- ‚ùì */help:* –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –∫–∞–∫ –∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. "
        "–ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n\n"
        "- üìñ *–í–≤–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é:* –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
        "–ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 'x**2 - 4*x + 4' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫ –∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n"
        "- üìñ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:* –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º. "
        "–ü—Ä–∏–º–µ—Ä: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "- üìñ *–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:* –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –±–æ—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –≤–≤–æ–¥–∞. "
        "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –±–æ—Ç–∞ –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    bot.send_message(call.message.chat.id, docs, parse_mode='HTML', reply_markup=markup)



# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def start_test(call):
    user_data[call.from_user.id] = {"index": 0, "score": 0, "questions": questions}
    ask_question(call.message)


def ask_question(message):
    user_id = message.chat.id
    question_data = user_data[user_id]
    question_index = question_data['index']
    question = question_data['questions'][question_index]

    markup = types.InlineKeyboardMarkup(row_width=2)
    options_buttons = [
        types.InlineKeyboardButton(option, callback_data=f"answer_{idx}") for idx, option in
        enumerate(question['options'])
    ]
    markup.add(*options_buttons)

    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if question_index > 0:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_question"))

    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu"))

    bot.send_message(
        user_id,
        f"–í–æ–ø—Ä–æ—Å {question_index + 1}: {question['text']}",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    send_welcome(call.message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_answer(call):
    user_id = call.from_user.id
    question_data = user_data[user_id]
    question_index = question_data['index']
    question = question_data['questions'][question_index]
    selected_option = int(call.data.split('_')[1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    if 'answers' not in question_data:
        question_data['answers'] = {}
    question_data['answers'][question_index] = selected_option

    if selected_option == question['correct']:
        question_data['score'] += 1

    question_data['index'] += 1

    if question_data['index'] < len(question_data['questions']):
        ask_question(call.message)
    else:
        score = question_data['score']
        user_first_name = call.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_last_name = call.from_user.last_name or ''  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        user_full_name = f"{user_first_name} {user_last_name}".strip()
        final_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_full_name} (ID: {user_id}) –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}/{len(question_data['questions'])}."
        bot.send_message(
            user_id,
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Å—á–µ—Ç: {score}/{len(question_data['questions'])}"
        )
        bot.send_message(
            ADMIN_ID,
            final_message
        )
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        user_data.pop(user_id)


# –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
@bot.callback_query_handler(func=lambda call: call.data == "prev_question")
def go_back_to_prev_question(call):
    user_id = call.from_user.id
    question_data = user_data[user_id]
    if question_data['index'] > 0:
        question_data['index'] -= 1
        ask_question(call.message)
    else:
        bot.send_message(call.message.chat.id, "–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–∑–∞–¥ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–ª—å–∑—è.")
